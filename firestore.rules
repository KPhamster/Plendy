rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /usernames/{username} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

      match /categories/{categoryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      match /color_categories/{colorCategoryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // Rules for followers subcollection
      match /followers/{followerId} {
        // Allow reading if: 
        // 1. The requester is the user whose followers list it is (userId).
        // 2. The requester is the follower being checked (followerId) - useful for isFollowing/getFriendIds checks.
        allow read: if request.auth != null && 
                       (request.auth.uid == userId || request.auth.uid == followerId);
        
        // Allow creating/deleting a follower document if:
        // 1. The requester is the one trying to follow (followerId = request.auth.uid)
        // 2. The target user is accepting a follow request (request.auth.uid == userId and follow request exists)
        allow create, delete: if request.auth != null && (
          request.auth.uid == followerId ||
          (request.auth.uid == userId && exists(/databases/$(database)/documents/users/$(userId)/followRequests/$(followerId)))
        );
        allow update: if false; // Generally, these docs are just for existence, no updates needed.
      }

      // Rules for following subcollection
      match /following/{followingId} {
        // Allow reading if:
        // 1. The requester is the user whose following list it is (userId).
        // 2. The requester is the user being checked if they are followed (followingId) - for completeness, though less common.
        allow read: if request.auth != null &&
                       (request.auth.uid == userId || request.auth.uid == followingId);

        // Allow creating/deleting a following document if:
        // 1. The requester is the one who is doing the following (userId = request.auth.uid)
        // 2. The target user is accepting a follow request (request.auth.uid == followingId and follow request exists)
        allow create, delete: if request.auth != null && (
          request.auth.uid == userId ||
          (request.auth.uid == followingId && exists(/databases/$(database)/documents/users/$(followingId)/followRequests/$(userId)))
        );
        allow update: if false; // Generally, these docs are just for existence, no updates needed.
      }

      // Rules for followRequests subcollection
      match /followRequests/{requesterId} {
        // Allow a user to create a follow request for another user (requesterId is the one sending)
        allow create: if request.auth != null && request.auth.uid == requesterId;
        
        // Allow reading if: 
        // 1. The requester is the target user (userId of parent doc) viewing their list of requests.
        // 2. The requester is the one who sent this specific request (requesterId).
        allow read: if request.auth != null && 
                       (request.auth.uid == userId || request.auth.uid == requesterId);
        
        // Allow the target user (userId of the parent document) to delete requests (accept/deny)
        allow delete: if request.auth != null && request.auth.uid == userId;
        
        allow update: if false; // Requests are typically created and deleted, not updated
      }

      // Rules for FCM tokens subcollection
      match /fcmTokens/{tokenId} {
        // Allow user to read/write/delete their own FCM tokens
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /experiences/{experienceId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Allow updates by creator or any current editor listed in the document
      allow update: if request.auth != null && (
        request.resource.data.createdBy == request.auth.uid ||
        (resource.data.editorUserIds is list && request.auth.uid in resource.data.editorUserIds)
      ) && isValidLocationData(request.resource.data.location);
      
      // Allow deletes by creator, or the last remaining editor (when they are the only editor)
      allow delete: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        ((resource.data.editorUserIds is list) && resource.data.editorUserIds.size() == 1 && request.auth.uid in resource.data.editorUserIds)
      );
    }

    // Shares collection controlling access to shared experiences
    //
    // Web fallback note:
    // - We intentionally allow unauthenticated READS only when
    //   visibility is "public" or "unlisted" so that
    //   https://plendy.app/shared/{token} can render a preview.
    // - "unlisted" relies on an unguessable token stored in the share doc.
    // - Direct shares remain private (readable only by sender/recipients).
    // - The share doc should contain a minimal "snapshot" for preview; the
    //   underlying /experiences docs stay protected by auth-only rules.
    match /experience_shares/{shareId} {
      // Anyone authenticated can create a share for their own userId
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;

      // Reads:
      // - public/unlisted shares are readable by anyone (unlisted security relies on unguessable IDs)
      // - direct shares are readable only by sender or listed recipients
      allow read: if (
        resource.data.visibility in ['public', 'unlisted']
      ) || (
        request.auth != null && (
          request.auth.uid == resource.data.fromUserId ||
          (resource.data.toUserIds is list && request.auth.uid in resource.data.toUserIds)
        )
      );

      // Updates and deletes limited to the sender; counters can be updated by backend using admin privileges
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }

    // Per-user denormalized received shares
    match /users/{userId}/received_shares/{shareId} {
      // A user can read and manage their own received shares list
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    match /public_experiences/{publicExperienceId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /sharedMediaItems/{mediaItemId} {
      allow read, write: if request.auth != null;
    }

    match /share_permissions/{permissionId} {
      allow read: if request.auth != null && (
                      resource.data.ownerUserId == request.auth.uid ||
                      resource.data.sharedWithUserId == request.auth.uid
                    );

      allow create: if request.auth != null &&
                      request.resource.data.ownerUserId == request.auth.uid;

      allow update: if request.auth != null &&
                      resource.data.ownerUserId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['accessLevel', 'updatedAt']);

      allow delete: if request.auth != null &&
                      resource.data.ownerUserId == request.auth.uid;
    }
  }

  function isValidLocationData(loc) {
    return (loc == null) || (
      (loc.get('administrativeAreaLevel2', '') is string) &&
      (loc.get('administrativeAreaLevel3', '') is string) &&
      (loc.get('administrativeAreaLevel4', '') is string) &&
      (loc.get('administrativeAreaLevel5', '') is string) &&
      (loc.get('administrativeAreaLevel6', '') is string) &&
      (loc.get('administrativeAreaLevel7', '') is string)
    );
  }
  
  // Note: link-based edit access is enforced at application layer due to
  // Firestore rules' lack of dynamic lookup by token. We keep rules strict here.
}