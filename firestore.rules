rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /usernames/{username} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        isSharedCategoryWrite(userId, request.auth.uid)
      );

      match /categories/{categoryId} {
        allow read: if request.auth != null && (
                      request.auth.uid == userId ||
                      exists(/databases/$(database)/documents/share_permissions/$(sharedPermissionDocId(userId, 'category', categoryId, request.auth.uid)))
                    );
        // Temporarily allow any authenticated user to write (for debugging)
        allow write: if request.auth != null;
      }

      match /color_categories/{colorCategoryId} {
        allow read: if request.auth != null && (
                      request.auth.uid == userId ||
                      exists(/databases/$(database)/documents/share_permissions/$(sharedPermissionDocId(userId, 'category', colorCategoryId, request.auth.uid)))
                    );
        // Temporarily allow any authenticated user to write (for debugging)
        allow write: if request.auth != null;
      }

      // Rules for followers subcollection
      match /followers/{followerId} {
        // Allow reading if: 
        // 1. The requester is the user whose followers list it is (userId).
        // 2. The requester is the follower being checked (followerId) - useful for isFollowing/getFriendIds checks.
        allow read: if request.auth != null && 
                       (request.auth.uid == userId || request.auth.uid == followerId);
        
        // Allow creating/deleting a follower document if:
        // 1. The requester is the one trying to follow (followerId = request.auth.uid)
        // 2. The target user is accepting a follow request (request.auth.uid == userId and follow request exists)
        allow create, delete: if request.auth != null && (
          request.auth.uid == followerId ||
          (request.auth.uid == userId && exists(/databases/$(database)/documents/users/$(userId)/followRequests/$(followerId)))
        );
        allow update: if false; // Generally, these docs are just for existence, no updates needed.
      }

      // Rules for following subcollection
      match /following/{followingId} {
        // Allow reading if:
        // 1. The requester is the user whose following list it is (userId).
        // 2. The requester is the user being checked if they are followed (followingId) - for completeness, though less common.
        allow read: if request.auth != null &&
                       (request.auth.uid == userId || request.auth.uid == followingId);

        // Allow creating/deleting a following document if:
        // 1. The requester is the one who is doing the following (userId = request.auth.uid)
        // 2. The target user is accepting a follow request (request.auth.uid == followingId and follow request exists)
        allow create, delete: if request.auth != null && (
          request.auth.uid == userId ||
          (request.auth.uid == followingId && exists(/databases/$(database)/documents/users/$(followingId)/followRequests/$(userId)))
        );
        allow update: if false; // Generally, these docs are just for existence, no updates needed.
      }

      // Rules for followRequests subcollection
      match /followRequests/{requesterId} {
        // Allow a user to create a follow request for another user (requesterId is the one sending)
        allow create: if request.auth != null && request.auth.uid == requesterId;
        
        // Allow reading if: 
        // 1. The requester is the target user (userId of parent doc) viewing their list of requests.
        // 2. The requester is the one who sent this specific request (requesterId).
        allow read: if request.auth != null && 
                       (request.auth.uid == userId || request.auth.uid == requesterId);
        
        // Allow the target user (userId of the parent document) to delete requests (accept/deny)
        allow delete: if request.auth != null && request.auth.uid == userId;
        
        allow update: if false; // Requests are typically created and deleted, not updated
      }

      // Rules for FCM tokens subcollection
      match /fcmTokens/{tokenId} {
        // Allow user to read/write/delete their own FCM tokens
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /experiences/{experienceId} {
      // Read access (covers both get and list/query operations):
      // - Creator can always read their experiences
      // - Editors listed on the document can read
      // - Users in sharedWithUserIds array can read (denormalized share permissions)
      // Note: For single-document gets, we could also check share_permissions collection,
      // but for queries/lists we must rely on denormalized sharedWithUserIds to avoid
      // cross-document lookups which are not supported in query rules.
      allow read: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        (resource.data.editorUserIds is list && request.auth.uid in resource.data.editorUserIds) ||
        (resource.data.keys().hasAny(['sharedWithUserIds']) && request.auth.uid in resource.data.sharedWithUserIds)
      );
      allow create: if request.auth != null;
      // Allow updates by creator or any current editor listed in the document
      allow update: if request.auth != null && isValidLocationData(request.resource.data.location) && (
        resource.data.createdBy == request.auth.uid ||
        (resource.data.editorUserIds is list && request.auth.uid in resource.data.editorUserIds) ||
        // Check if user is in denormalized sharedWithUserIds (updated by service layer based on category shares)
        (resource.data.keys().hasAny(['sharedWithUserIds']) && request.auth.uid in resource.data.sharedWithUserIds)
      );
      
      // Allow deletes by creator, or the last remaining editor (when they are the only editor)
      allow delete: if request.auth != null && (
        resource.data.createdBy == request.auth.uid ||
        ((resource.data.editorUserIds is list) && resource.data.editorUserIds.size() == 1 && request.auth.uid in resource.data.editorUserIds)
      );
    }

    // Shares collection controlling access to shared experiences
    //
    // Web fallback note:
    // - We intentionally allow unauthenticated READS only when
    //   visibility is "public" or "unlisted" so that
    //   https://plendy.app/shared/{token} can render a preview.
    // - "unlisted" relies on an unguessable token stored in the share doc.
    // - Direct shares remain private (readable only by sender/recipients).
    // - The share doc should contain a minimal "snapshot" for preview; the
    //   underlying /experiences docs stay protected by auth-only rules.
    match /experience_shares/{shareId} {
      // Anyone authenticated can create a share for their own userId
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;

      // Reads:
      // - public/unlisted shares are readable by anyone (unlisted security relies on unguessable IDs)
      // - direct shares are readable only by sender or listed recipients
      allow read: if (
        resource.data.visibility in ['public', 'unlisted']
      ) || (
        request.auth != null && (
          request.auth.uid == resource.data.fromUserId ||
          (resource.data.toUserIds is list && request.auth.uid in resource.data.toUserIds)
        )
      );

      // Updates and deletes limited to the sender; counters can be updated by backend using admin privileges
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }

    // Shares collection controlling access to shared categories (user or color)
    // Public/unlisted are readable by anyone; direct/private readable by sender only
    match /category_shares/{shareId} {
      // Only the sender can create a share document for their own userId
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;

      // Reads: public/unlisted are open; otherwise only sender can read
      allow read: if (
        resource.data.visibility in ['public', 'unlisted']
      ) || (
        request.auth != null && request.auth.uid == resource.data.fromUserId
      );

      // Only the sender can modify or delete the share document
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.fromUserId;
    }

    // Per-user denormalized received shares
    match /users/{userId}/received_shares/{shareId} {
      // A user can read and manage their own received shares list
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    match /public_experiences/{publicExperienceId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
      allow delete: if false;
    }

    match /sharedMediaItems/{mediaItemId} {
      allow read, write: if request.auth != null;
    }

    match /message_threads/{threadId} {
      // Temporarily simplified for debugging collection queries
      allow read: if request.auth != null;

      allow create: if request.auth != null &&
        hasValidThreadData(request.resource.data) &&
        request.auth.uid in request.resource.data.participants;

      allow update: if request.auth != null &&
        hasValidThreadData(request.resource.data) &&
        request.auth.uid in resource.data.participants &&
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants == resource.data.participants &&
        request.resource.data.participantsKey == resource.data.participantsKey;

      allow delete: if request.auth != null &&
        request.auth.uid in resource.data.participants;

      match /messages/{messageId} {
        // Temporarily simplified for debugging subcollection queries
        allow read: if request.auth != null;

        allow create: if request.auth != null &&
          request.resource.data.senderId == request.auth.uid &&
          request.resource.data.text is string &&
          request.resource.data.text.size() > 0 &&
          (request.resource.data.createdAt is timestamp ||
            request.resource.data.createdAt == request.time);

        allow update: if false;

        allow delete: if request.auth != null &&
          resource.data.senderId == request.auth.uid;
      }
    }

    match /share_permissions/{permissionId} {
      allow read: if request.auth != null && (
                      resource.data.ownerUserId == request.auth.uid ||
                      resource.data.sharedWithUserId == request.auth.uid ||
                      exists(/databases/$(database)/documents/share_permissions/$(sharedPermissionDocId(resource.data.ownerUserId, resource.data.itemType, resource.data.itemId, request.auth.uid)))
                    );

      // Creation rules:
      // - Owners can always create permissions for their items
      // - Recipients can self-save a VIEW permission for items that truly belong to the owner
      //   (used by "Save" flow for public/unlisted shared links)
      allow create: if request.auth != null &&
        isValidShareAccessLevel(request.resource.data.accessLevel) && (
        // Owner-granted share
        request.resource.data.ownerUserId == request.auth.uid
        ||
        // Recipient self-save of a granted permission
        (
          request.resource.data.sharedWithUserId == request.auth.uid &&
          request.resource.data.accessLevel in ['view', 'edit'] &&
          (
            // Category owned by the owner (text or color category under owner namespace)
            (
              request.resource.data.itemType == 'category' && (
                exists(/databases/$(database)/documents/users/$(request.resource.data.ownerUserId)/categories/$(request.resource.data.itemId)) ||
                exists(/databases/$(database)/documents/users/$(request.resource.data.ownerUserId)/color_categories/$(request.resource.data.itemId))
              )
            )
            ||
            // Experience created by the owner
            (
              request.resource.data.itemType == 'experience' &&
              exists(/databases/$(database)/documents/experiences/$(request.resource.data.itemId)) &&
              get(/databases/$(database)/documents/experiences/$(request.resource.data.itemId)).data.createdBy == request.resource.data.ownerUserId
            )
          )
        )
      );

      // Allow owner or recipient to update access level within strict bounds
      allow update: if request.auth != null && (
                      (
                        resource.data.ownerUserId == request.auth.uid &&
                        request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['accessLevel', 'updatedAt']) &&
                        isValidShareAccessLevel(request.resource.data.accessLevel)
                      ) || (
                        resource.data.sharedWithUserId == request.auth.uid &&
                        request.resource.data.diff(resource.data).affectedKeys()
                            .hasOnly(['accessLevel', 'updatedAt']) &&
                        request.resource.data.itemId == resource.data.itemId &&
                        request.resource.data.itemType == resource.data.itemType &&
                        request.resource.data.ownerUserId == resource.data.ownerUserId &&
                        request.resource.data.sharedWithUserId == resource.data.sharedWithUserId &&
                        request.resource.data.createdAt == resource.data.createdAt &&
                        isValidShareAccessLevel(request.resource.data.accessLevel)
                      )
                    );

      // Allow either owner or recipient to delete a permission
      allow delete: if request.auth != null && (
                      resource.data.ownerUserId == request.auth.uid ||
                      resource.data.sharedWithUserId == request.auth.uid
                    );
    }
  }

  function sharedPermissionDocId(ownerId, itemType, itemId, viewerId) {
    return ownerId + '_' + itemType + '_' + itemId + '_' + viewerId;
  }

  function hasEditCategoryPermission(ownerId, categoryId, editorId) {
    return editorId == ownerId || (
      editorId != '' && ownerId != '' && categoryId != '' &&
      hasMatchingCategoryEditPermission(ownerId, categoryId, editorId)
    );
  }

  function hasMatchingCategoryEditPermission(ownerId, categoryId, editorId) {
    let permId = sharedPermissionDocId(ownerId, 'category', categoryId, editorId);
    let permPath = /databases/$(database)/documents/share_permissions/$(permId);
    // Just check existence - we control permission creation and only create 'edit' level for category shares
    // Using get() would fail with permission-denied if the user doesn't have access to that permission doc
    return exists(permPath);
  }

  function isSharedCategoryWrite(ownerId, editorId) {
    return editorId != '' && (
      (request.resource != null && isSharedCategoryDoc(request.resource.__name__, ownerId, editorId)) ||
      (request.resource == null && resource != null && isSharedCategoryDoc(resource.__name__, ownerId, editorId))
    );
  }

  function isSharedCategoryDoc(path, ownerId, editorId) {
    let segments = path.segments;
    return segments.size() >= 9 &&
           segments[5] == 'users' &&
           segments[6] == ownerId &&
           ((segments[7] == 'categories' &&
               hasMatchingCategoryEditPermission(ownerId, segments[8], editorId)) ||
           (segments[7] == 'color_categories' &&
              hasMatchingCategoryEditPermission(ownerId, segments[8], editorId)));
  }

  function isValidShareAccessLevel(level) {
    return level == 'view' || level == 'edit';
  }

  function isEditAccessLevel(level) {
    return level == 'edit' || level == 'edit_category' || level == 'edit_color_category';
  }

  function isValidLocationData(loc) {
    return (loc == null) || (
      (!loc.keys().hasAny(['administrativeAreaLevel2']) || loc.administrativeAreaLevel2 is string) &&
      (!loc.keys().hasAny(['administrativeAreaLevel3']) || loc.administrativeAreaLevel3 is string) &&
      (!loc.keys().hasAny(['administrativeAreaLevel4']) || loc.administrativeAreaLevel4 is string) &&
      (!loc.keys().hasAny(['administrativeAreaLevel5']) || loc.administrativeAreaLevel5 is string) &&
      (!loc.keys().hasAny(['administrativeAreaLevel6']) || loc.administrativeAreaLevel6 is string) &&
      (!loc.keys().hasAny(['administrativeAreaLevel7']) || loc.administrativeAreaLevel7 is string)
    );
  }

  function isThreadParticipant(data, uid) {
    return data != null &&
      data.participants is list &&
      uid in data.participants;
  }

  function hasValidThreadData(data) {
    return data != null &&
      data.participants is list &&
      data.participants.size() > 0 &&
      data.participantsKey is string;
  }

  function threadHasParticipant(threadId, uid) {
    let thread = get(/databases/$(database)/documents/message_threads/$(threadId));
    return thread != null && thread.exists && isThreadParticipant(thread.data, uid);
  }
  
  // Note: link-based edit access is enforced at application layer due to
  // Firestore rules' lack of dynamic lookup by token. We keep rules strict here.
}
